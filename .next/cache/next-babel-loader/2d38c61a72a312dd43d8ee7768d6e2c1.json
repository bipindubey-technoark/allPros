{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/bipin/allPros/components/snackbar/MainSnackbar.jsx\";\nvar __jsx = React.createElement;\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useSnackbar } from '../../lib/context';\nvar variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    success: {\n      backgroundColor: green[600]\n    },\n    error: {\n      backgroundColor: theme.palette.error.dark\n    },\n    info: {\n      backgroundColor: theme.palette.primary.main\n    },\n    warning: {\n      backgroundColor: amber[700]\n    },\n    icon: {\n      fontSize: 20\n    },\n    iconVariant: {\n      opacity: 0.9,\n      marginRight: theme.spacing(1)\n    },\n    message: {\n      display: 'flex',\n      alignItems: 'center'\n    }\n  };\n});\n\nfunction MySnackbarContentWrapper(props) {\n  var classes = useStyles();\n\n  var message = props.message,\n      onClose = props.onClose,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"message\", \"onClose\", \"variant\"]);\n\n  var Icon = variantIcon[variant];\n  return __jsx(SnackbarContent, _extends({\n    className: classes[variant],\n    \"aria-describedby\": \"client-snackbar\",\n    message: __jsx(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, __jsx(Icon, {\n      className: clsx(classes.icon, classes.iconVariant),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), message),\n    action: [__jsx(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      onClick: onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(CloseIcon, {\n      className: classes.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }))]\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }));\n}\n\nMySnackbarContentWrapper.propTypes = {\n  message: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n  variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired\n};\n\nfunction MainSnackbar() {\n  var _useSnackbar = useSnackbar(),\n      snackbar = _useSnackbar.snackbar,\n      closeSnackbar = _useSnackbar.closeSnackbar;\n\n  var variant = snackbar.variant,\n      message = snackbar.message,\n      open = snackbar.open;\n  return __jsx(Snackbar, {\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'right'\n    },\n    open: open,\n    autoHideDuration: 4000,\n    onClose: closeSnackbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(MySnackbarContentWrapper, {\n    onClose: closeSnackbar,\n    variant: variant,\n    message: message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }));\n}\n\nexport default MainSnackbar;","map":{"version":3,"sources":["/home/bipin/allPros/components/snackbar/MainSnackbar.jsx"],"names":["amber","green","IconButton","Snackbar","SnackbarContent","makeStyles","CheckCircleIcon","CloseIcon","ErrorIcon","InfoIcon","WarningIcon","clsx","PropTypes","React","useSnackbar","variantIcon","success","warning","error","info","useStyles","theme","backgroundColor","palette","dark","primary","main","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","MySnackbarContentWrapper","props","classes","onClose","variant","other","Icon","propTypes","string","isRequired","func","oneOf","MainSnackbar","snackbar","closeSnackbar","open","vertical","horizontal"],"mappings":"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","sourcesContent":["import { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useSnackbar } from '../../lib/context';\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  success: {\n    backgroundColor: green[600],\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main,\n  },\n  warning: {\n    backgroundColor: amber[700],\n  },\n  icon: {\n    fontSize: 20,\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1),\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n}));\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles();\n  const {\n    message, onClose, variant, ...other\n  } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={classes[variant]}\n      aria-describedby=\"client-snackbar\"\n      message={(\n        <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      )}\n      action={[\n        <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n          <CloseIcon className={classes.icon} />\n        </IconButton>,\n      ]}\n      {...other}\n    />\n  );\n}\n\nMySnackbarContentWrapper.propTypes = {\n  message: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n  variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n};\n\nfunction MainSnackbar() {\n  const { snackbar, closeSnackbar } = useSnackbar();\n  const { variant, message, open } = snackbar;\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'right',\n      }}\n      open={open}\n      autoHideDuration={4000}\n      onClose={closeSnackbar}\n    >\n      <MySnackbarContentWrapper\n        onClose={closeSnackbar}\n        variant={variant}\n        message={message}\n      />\n    </Snackbar>\n  );\n}\n\nexport default MainSnackbar;\n"]},"metadata":{},"sourceType":"module"}
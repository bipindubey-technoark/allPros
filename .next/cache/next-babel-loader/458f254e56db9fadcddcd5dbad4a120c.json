{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"F:\\\\Shrinath\\\\Technoark\\\\allPros\\\\components\\\\formik\\\\FormikSelect.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport PropTypes from 'prop-types';\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nfunction FormikSelect(_ref) {\n  let {\n    field,\n    options,\n    textField,\n    textField2,\n    valueField,\n    fullWidth,\n    label,\n    form: {\n      touched,\n      errors\n    },\n    parser\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"field\", \"options\", \"textField\", \"textField2\", \"valueField\", \"fullWidth\", \"label\", \"form\", \"parser\"]);\n\n  const classes = useStyles();\n  const hasError = !!(touched[field.name] && errors[field.name]);\n  return __jsx(FormControl, {\n    className: classes.formControl,\n    fullWidth: fullWidth,\n    error: hasError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(InputLabel, {\n    htmlFor: field.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, label), __jsx(Select, _extends({}, field, props, {\n    displayEmpty: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), options.map(item => __jsx(MenuItem, {\n    key: item.id,\n    value: item[valueField],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, parser ? parser(item[textField]) : textField2 ? item[textField] + \" - \" + item[textField2] : item[textField]))), touched[field.name] && errors[field.name] && __jsx(FormHelperText, {\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, errors[field.name]));\n}\n\nFormikSelect.propTypes = {\n  field: PropTypes.objectOf({\n    name: PropTypes.string\n  }).isRequired,\n  form: PropTypes.objectOf({\n    touched: PropTypes.instanceOf(Array),\n    errors: PropTypes.instanceOf(Array)\n  }).isRequired,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired\n  })),\n  label: PropTypes.string,\n  textField: PropTypes.string.isRequired,\n  valueField: PropTypes.string.isRequired,\n  fullWidth: PropTypes.bool\n};\nFormikSelect.defaultProps = {\n  fullWidth: false,\n  options: [],\n  label: ''\n};\nexport default FormikSelect;","map":{"version":3,"sources":["F:\\Shrinath\\Technoark\\allPros\\components\\formik\\FormikSelect.jsx"],"names":["React","makeStyles","InputLabel","MenuItem","FormHelperText","FormControl","Select","PropTypes","useStyles","theme","formControl","minWidth","selectEmpty","marginTop","spacing","FormikSelect","field","options","textField","textField2","valueField","fullWidth","label","form","touched","errors","parser","props","classes","hasError","name","map","item","id","color","propTypes","objectOf","string","isRequired","instanceOf","Array","arrayOf","shape","number","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction FormikSelect({\r\n  field,\r\n  options,\r\n  textField,\r\n  textField2,\r\n  valueField,\r\n  fullWidth,\r\n  label,\r\n  form: { touched, errors },\r\n  parser,\r\n  ...props\r\n}) {\r\n  const classes = useStyles();\r\n  const hasError = !!((touched[field.name] && errors[field.name]));\r\n  return (\r\n\r\n    <FormControl className={classes.formControl} fullWidth={fullWidth} error={hasError}>\r\n      <InputLabel htmlFor={field.name}>{label}</InputLabel>\r\n      <Select {...field} {...props} displayEmpty>\r\n        {options.map((item) => (\r\n          <MenuItem\r\n            key={item.id}\r\n            value={item[valueField]}\r\n          >\r\n          {parser?parser(item[textField]):textField2 ? item[textField]+\" - \"+ item[textField2] :item[textField]}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n      {touched[field.name] && errors[field.name] && (\r\n        <FormHelperText style={{ color: 'red' }}>\r\n          {errors[field.name]}\r\n        </FormHelperText>\r\n      )}\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nFormikSelect.propTypes = {\r\n  field: PropTypes.objectOf({\r\n    name: PropTypes.string,\r\n  }).isRequired,\r\n  form: PropTypes.objectOf({\r\n    touched: PropTypes.instanceOf(Array),\r\n    errors: PropTypes.instanceOf(Array),\r\n  }).isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n  })),\r\n  label: PropTypes.string,\r\n  textField: PropTypes.string.isRequired,\r\n  valueField: PropTypes.string.isRequired,\r\n  fullWidth: PropTypes.bool,\r\n};\r\n\r\nFormikSelect.defaultProps = {\r\n  fullWidth: false,\r\n  options: [],\r\n  label: '',\r\n};\r\n\r\nexport default FormikSelect;\r\n"]},"metadata":{},"sourceType":"module"}